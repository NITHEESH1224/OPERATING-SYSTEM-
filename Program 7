#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
} Process;

void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void sort_by_arrival_time(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process *processes = (Process *)malloc(n * sizeof(Process));

    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d:\n", i + 1);
        processes[i].process_id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
    }

    sort_by_arrival_time(processes, n);

    int current_time = 0;
    double total_waiting_time = 0;
    double total_turnaround_time = 0;

    printf("\nGantt Chart:\n");

    for (int i = 0; i < n; i++) {
        while (current_time < processes[i].arrival_time) {
            printf("| Idle ");
            current_time++;
        }

        printf("| P%d ", processes[i].process_id);
        current_time += processes[i].burst_time;
        int waiting_time = current_time - processes[i].arrival_time - processes[i].burst_time;
        int turnaround_time = current_time - processes[i].arrival_time;

        total_waiting_time += waiting_time;
        total_turnaround_time += turnaround_time;
    }

    printf("|\n");

    double average_waiting_time = total_waiting_time / n;
    double average_turnaround_time = total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);

    free(processes);
    return 0;
}
