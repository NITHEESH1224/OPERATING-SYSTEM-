#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 3
#define MAX_PAGES 10

void printPageFault(int page, int frames[MAX_FRAMES]) {
    printf("Page %d loaded into Frames: [", page);
    for (int i = 0; i < MAX_FRAMES; ++i) {
        printf("%d", frames[i]);

        if (i < MAX_FRAMES - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

void updateLRU(int lru[MAX_FRAMES], int usedFrame) {
    for (int i = 0; i < MAX_FRAMES; ++i) {
        if (i == usedFrame) {
            lru[i] = 0; // Recently used
        } else {
            lru[i]++; // Increment age
        }
    }
}

int findLRUIndex(int lru[MAX_FRAMES]) {
    int maxAge = -1;
    int lruIndex = -1;

    for (int i = 0; i < MAX_FRAMES; ++i) {
        if (lru[i] > maxAge) {
            maxAge = lru[i];
            lruIndex = i;
        }
    }

    return lruIndex;
}

int main() {
    int frames[MAX_FRAMES] = {-1, -1, -1};
    int lru[MAX_FRAMES] = {0, 0, 0};
    int pages[MAX_PAGES] = {0, 1, 2, 3, 2, 4, 5, 3, 4, 6};
    int pageFaults = 0;

    printf("LRU Page Replacement Simulation\n\n");

    for (int i = 0; i < MAX_PAGES; ++i) {
        int page = pages[i];
        int pageFound = 0;

        // Check if the page is already in a frame
        for (int j = 0; j < MAX_FRAMES; ++j) {
            if (frames[j] == page) {
                pageFound = 1;
                updateLRU(lru, j); // Update LRU information
                break;
            }
        }

        // If page not found, replace the least recently used page
        if (!pageFound) {
            int lruIndex = findLRUIndex(lru);
            frames[lruIndex] = page;
            updateLRU(lru, lruIndex); // Update LRU information
            printPageFault(page, frames);
            pageFaults++;
        }
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);

    return 0;
}
